import { Formik } from "formik";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";
import { useContext, useEffect, useState } from "react";
import { Header } from "../components/Header";
import { SearchBar } from "../components/SearchBar";
import { SmallShow } from "../components/SmallShow";
import AuthContext from "../contexts/authContext";
import DataContext from "../contexts/dataContext";
import PageContext from "../contexts/pageContext";

interface FormProps {
  email?: string;
  password?: string;
}

const Login: NextPage = () => {
  const router = useRouter();
  const { logIn } = useContext(AuthContext);

  function logInUser() {
    logIn();
    router.push("/");
  }

  return (
    <>
      <Head>
        <title>Frontend Mentor | Entertainment web app | Login</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <main className="login">
        <Image src={"/assets/logo.svg"} alt="logo" width="32" height="25.6" />
        <div className="login-container">
          <h1>Login</h1>
          <Formik
            initialValues={{ email: "", password: "" }}
            validate={(values) => {
              const errors: FormProps = {};
              if (!values.email) {
                errors.email = "Can't be empty";
              }
              if (!values.password) {
                errors.password = "Can't be empty";
              }
              return errors;
            }}
            onSubmit={(values, { setSubmitting }) => {
              setSubmitting(false);
              logInUser();
            }}
          >
            {({
              values,
              errors,
              touched,
              handleChange,
              handleBlur,
              handleSubmit,
              isSubmitting,
              /* and other goodies */
            }) => (
              <form className="login-form" onSubmit={handleSubmit}>
                <div className="input-wrapper">
                  <label htmlFor="email" className="sr-only">
                    Email
                  </label>
                  <input
                    type="email"
                    name="email"
                    id="email"
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.email}
                    placeholder="Email address"
                  />
                  {errors.email && touched.email && (
                    <label htmlFor="email" className="empty-field">
                      {errors.email}
                    </label>
                  )}
                </div>
                <div className="input-wrapper">
                  <label htmlFor="password" className="sr-only">
                    Password
                  </label>
                  <input
                    type="password"
                    name="password"
                    id="password"
                    onChange={handleChange}
                    onBlur={handleBlur}
                    value={values.password}
                    placeholder="Password"
                  />
                  {errors.password && touched.password && (
                    <label htmlFor="password" className="empty-field">
                      {errors.password}
                    </label>
                  )}
                </div>
                <button className="red-button" type="submit" disabled={isSubmitting}>
                  Login to your account
                </button>
              </form>
            )}
          </Formik>
          <p>
            Don&apos;t have an account?{" "}
            <Link href="/sign-up">
              <a>Sign up</a>
            </Link>
          </p>
        </div>
      </main>
    </>
  );
};

export default Login;
